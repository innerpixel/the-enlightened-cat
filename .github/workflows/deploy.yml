name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build
        run: |
          cargo build --release
          ls -la target/release/
          # Make sure the binary exists
          if [ ! -f "target/release/the-enlightened-cat" ]; then
            echo "Binary not found, checking for other names"
            ls -la target/release/
            # Try to find the actual binary name
            BINARY=$(find target/release -type f -executable -not -name "*.d" -not -name "*.so" | head -n 1)
            if [ -n "$BINARY" ]; then
              echo "Found binary at $BINARY"
              # Create a symlink with the expected name
              ln -sf "$BINARY" target/release/the-enlightened-cat
            else
              echo "No binary found in target/release"
              exit 1
            fi
          fi
      
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace
      
      - name: Deploy to VPS
        run: |
          # Find the actual binary name
          BINARY_NAME="the-enlightened-cat"
          if [ ! -f "target/release/$BINARY_NAME" ]; then
            echo "Looking for the actual binary name"
            BINARY=$(find target/release -type f -executable -not -name "*.d" -not -name "*.so" | head -n 1)
            if [ -n "$BINARY" ]; then
              BINARY_NAME=$(basename "$BINARY")
              echo "Found binary: $BINARY_NAME"
            else
              echo "No binary found in target/release"
              exit 1
            fi
          fi
          
          # Create deployment package
          tar -czf deploy.tar.gz \
            target/release/$BINARY_NAME \
            templates/ \
            static/ \
            src/
          
          # Copy package to server
          scp -o StrictHostKeyChecking=no -P 2223 deploy.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/
          
      - name: Create deployment script
        run: |
          cat > finish-deployment.sh << 'SCRIPT'
          #!/bin/bash
          
          # Stop service
          sudo systemctl stop the-enlightened-cat.service
          
          # Create target directory if it doesn't exist
          sudo mkdir -p /var/www/the-enlightened-cat/target/release/
          
          # Copy files to production directory
          sudo cp ~/deploy-temp/target/release/the-enlightened-cat /var/www/the-enlightened-cat/target/release/the-enlightened-cat
          sudo cp -r ~/deploy-temp/templates/* /var/www/the-enlightened-cat/templates/
          sudo cp -r ~/deploy-temp/static/* /var/www/the-enlightened-cat/static/
          sudo cp -r ~/deploy-temp/src/* /var/www/the-enlightened-cat/src/
          
          # Fix permissions
          sudo chown -R www-data:www-data /var/www/the-enlightened-cat
          
          # Start service
          sudo systemctl start enlightened-cat.service
          
          # Check service status
          sudo systemctl status enlightened-cat.service
          
          # Clean up
          rm -rf ~/deploy-temp
          rm ~/deploy.tar.gz
          rm ~/finish-deployment.sh
          SCRIPT
          
      - name: Deploy to VPS
        run: |
          # Copy package to server
          scp -o StrictHostKeyChecking=no -P 2223 deploy.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/
          scp -o StrictHostKeyChecking=no -P 2223 finish-deployment.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/
          
          # Execute deployment commands
          ssh -o StrictHostKeyChecking=no -p 2223 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Extract files
            mkdir -p ~/deploy-temp
            tar -xzf deploy.tar.gz -C ~/deploy-temp
            
            # Find the binary in the deploy-temp directory
            BINARY_NAME=$(find ~/deploy-temp/target/release -type f -executable -not -name "*.d" -not -name "*.so" | head -n 1)
            if [ -z "$BINARY_NAME" ]; then
              echo "No binary found in deploy-temp/target/release"
              exit 1
            fi
            
            echo "Found binary: $BINARY_NAME"
            chmod +x ~/finish-deployment.sh
            
            echo "=================================================="
            echo "Deployment package prepared!"
            echo "To complete deployment, run: ~/finish-deployment.sh"
            echo "=================================================="
          EOF